#include <iostream>

struct Node
{
    int data;
    Node* next;
};

int main()
{
    // 자료구조?
    // Data Structure, 데이터를 효율적으로 저장하고 관리하는 방법
    // 적절한 자료구조를 선택하면 프로그램 성능을 향상시킬 수 있다.
    // 대표적인 자료구조 : 배열, 링크드리스트, 큐, 스택, 그래프, 트리

    // 노드 (Node)
    // 데이터를 저장하는 최소 단위 (데이터 + 다음 노드의 주소)

    // 링크드리스트란?
    // 한 노드가 다음 노드를 가리키는 방식으로 연결된 자료구조
    // 동적으로 크기를 조정할 수 있어 유연한 데이터 관리가 가능하다.
    


    // 배열 vs 링크드리스트
    // 배열의 단점
    // 크기가 고정되어있어 초기에 충분한 크기를 설정해줘야 한다.
    // 크기를 변경하려면 새로운 배열을 만들어 데이터를 복사해야 하므로 비용이 크다.

    // 링크드리스트의 장점
    // 실행 도중(런타임)에도 데이터 추가가 용이하다.
    // 노드를 동적으로 생성하고 포인터로 연결하면 크기를 자유롭게 조정할 수 있다.
    // 중간에 데이터를 삽입하거나 삭제할 때, 기존 데이터를 이동할 필요가 없다.

    // 링크드리스트를 사용하는 경우
    // 데이터가 자주 삽입되거나 삭제될 때 효율적이다.
    // 리스트 크기를 사전에 예측하기 어려운 경우


    // 동적할당 (Dynamic Allocation)
    // 프로그램 실행 도중(Runtime)에 필요한 만큼 메모리를 할당하는 방식
    // 메모리는 힙(Heap) 영역에 할당되며, 명시적으로 해제(delete)하지 않으면 사라지지 않는다.

    // new 연산자 : 힙 영역에 메모리를 할당하고, 해당 주소를 반환해준다.

    int* p;
    p = new int;
    *p = 3;
    delete p; // 메모리 해제

    Node* pp = new Node;
    pp->data = 3;
    delete pp;

    return 0;
}